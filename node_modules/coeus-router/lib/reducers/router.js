'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.default = router;

var _searchParse = require('../utils/searchParse');

var _searchParse2 = _interopRequireDefault(_searchParse);

var _searchStringify = require('../utils/searchStringify');

var _searchStringify2 = _interopRequireDefault(_searchStringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// a little hack to sync the popstate event
function syncPopState() {
  return new Promise(function (resolve) {
    var restore = window.onpopstate;

    window.onpopstate = function () {
      window.onpopstate = restore;
      resolve();
    };
  });
}

function router(routes) {
  return function reducer(state, action) {
    if (state === undefined) {
      var _ret = function () {
        var path = window.location.pathname;
        var search = (0, _searchParse2.default)(window.location.search);

        return {
          v: routes.match(path).then(function (result) {
            if (result === false) {
              throw new Error('404 Not Found: This should be handled in server. ' + 'A land page rendered in browser should not be 404.');
            }

            var components = result.components;
            var args = result.args;

            return {
              components: components,
              args: args,
              search: search
            };
          })
        };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }

    switch (action.type) {
      case 'ROUTE':
        {
          var _ret2 = function () {
            var path = action.path;
            var name = action.name;

            if (name !== undefined) {
              var args = action.args;
              path = routes.link(name, args);
            }

            return {
              v: routes.match(path).then(function (result) {
                if (result === false) {
                  var _components = state.components;
                  var _args = state.args;
                  var _search = state.search;

                  return {
                    components: _components,
                    args: _args,
                    search: _search,
                    notFound: path
                  };
                }

                var search = action.search || {};

                history.pushState(null, null, path + (0, _searchStringify2.default)(search));

                var components = result.components;
                var args = result.args;

                return {
                  components: components,
                  args: args,
                  search: search
                };
              })
            };
          }();

          if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
        }
      case 'ROUTE_BACK':
        {
          var p = syncPopState();

          history.back();

          return p.then(function () {
            return routes.match(window.location.pathname);
          }).then(function (result) {
            // All 404 will not be pushed in history
            // so it's impossible to get false result
            // here.

            var components = result.components;
            var args = result.args;

            var search = (0, _searchParse2.default)(window.location.search);
            return {
              components: components,
              args: args,
              search: search
            };
          });
        }
      case 'ROUTE_FORWARD':
        {
          var _p = syncPopState();

          history.forward();

          return _p.then(function () {
            return routes.match(window.location.pathname);
          }).then(function (result) {
            // All 404 will not be pushed in history
            // so it's impossible to get false result
            // here.

            var components = result.components;
            var args = result.args;

            var search = (0, _searchParse2.default)(window.location.search);
            return {
              components: components,
              args: args,
              search: search
            };
          });
        }
      default:
        return state;
    }
  };
}