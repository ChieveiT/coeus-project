'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = multiplexSubscriber;

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _forEach = require('lodash/forEach');

var _forEach2 = _interopRequireDefault(_forEach);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function multiplexSubscriber(target, subscriber) {
  if (!(0, _isPlainObject2.default)(target)) {
    throw new Error('Expected target to be a plain object.');
  }

  if (typeof subscriber !== 'function') {
    throw new Error('Expected subscriber to be a function.');
  }

  // record keys of tags to avoid duplicate tags
  var checkTags = {};

  var tracer = function createTracer(node) {
    var keyStack = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

    var keys = Object.keys(node);
    var keyTracers = {};

    (0, _forEach2.default)(keys, function (key) {
      var nextKeyStack = [].concat(_toConsumableArray(keyStack), [key]);

      if (typeof node[key] === 'string') {
        (function () {
          var tag = node[key];

          // check duplicate tag
          if (checkTags[tag] === true) {
            throw new Error('Duplicate tag of target on ' + nextKeyStack.join('.') + '.');
          } else {
            checkTags[tag] = true;
          }

          // create a leaf tracer
          keyTracers[key] = function (tags, value) {
            var resultTags = _extends({}, tags, _defineProperty({}, tag, value));

            // filter undefined value
            // to keep neat shape of tags
            if (value === undefined) {
              delete resultTags[tag];
            }

            return resultTags;
          };
        })();
      } else if ((0, _isPlainObject2.default)(node[key])) {
        // recursive
        keyTracers[key] = createTracer(node[key], nextKeyStack);
      } else {
        throw new Error('Expected target to be a plain object on ' + nextKeyStack.join('.') + '.');
      }
    });

    // to store the previous state
    var previousStates = {};

    return function Tracer(tags) {
      var states = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      if (!(0, _isPlainObject2.default)(states)) {
        throw new Error('Expected a plain object on state ' + keyStack.join('.') + ' ' + ('but receive type "' + (typeof states === 'undefined' ? 'undefined' : _typeof(states)) + '".') + 'Try to change subscriber shape to match state shape.');
      }

      var resultTags = tags;

      (0, _forEach2.default)(keys, function (key) {
        var keyTracer = keyTracers[key];

        if (previousStates[key] === states[key]) {
          return;
        }

        if (states[key] === undefined) {
          delete previousStates[key];
        } else {
          previousStates[key] = states[key];
        }

        resultTags = keyTracer(resultTags, states[key]);
      });

      return resultTags;
    };
  }(target);

  // presistent tags as a flatten internal state
  // listened by multiplex subscriber
  var tags = {};

  return function resultSubscriber(state) {
    var resultTags = tracer(tags, state);

    if (resultTags !== tags) {
      tags = resultTags;

      subscriber(tags);
    }
  };
}