'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = createStore;

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _reduceRight = require('lodash/reduceRight');

var _reduceRight2 = _interopRequireDefault(_reduceRight);

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _isEmpty = require('lodash/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _forEach = require('lodash/forEach');

var _forEach2 = _interopRequireDefault(_forEach);

var _intersection = require('lodash/intersection');

var _intersection2 = _interopRequireDefault(_intersection);

var _difference = require('lodash/difference');

var _difference2 = _interopRequireDefault(_difference);

var _combineReducers = require('./combineReducers');

var _combineReducers2 = _interopRequireDefault(_combineReducers);

var _combineSubscribers = require('./combineSubscribers');

var _combineSubscribers2 = _interopRequireDefault(_combineSubscribers);

var _multiplexSubscriber = require('./multiplexSubscriber');

var _multiplexSubscriber2 = _interopRequireDefault(_multiplexSubscriber);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// Hack an additional "root" node to make some convience.
//
// combineReducers() and combineSubscribers() only accept
// a plain object, which causes extra handling if we pass
// a top reducer or a top subscriber for the whole state
// without hacking the reducer or subscriber to an object.
//
// What's more, mergeTree() and separateTree() in mount-
// Reducer() only accept plain objects as their (x, y)
// arguments.
//
function hack(e) {
  return {
    root: e
  };
}

function createStore(middlewares) {
  var initReducer = function initReducer() {
    return {/* root: undefined*/};
  };

  var currentState = {/* root: undefined*/};
  var currentReducer = initReducer;
  var currentReducerTree = {};
  var currentSubscribers = [];
  var previousDispatch = Promise.resolve();

  function getState() {
    // extract the actual state from hacking
    var _currentState = currentState;
    var root = _currentState.root;

    return root;
  }

  function mountReducer(reducer) {
    if (typeof reducer !== 'function' && !(0, _isPlainObject2.default)(reducer)) {
      throw new Error('Expected reducer to be a function or a plain object.');
    }

    reducer = hack(reducer);

    currentReducerTree = function mergeTree(x, y) {
      var keyStack = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

      var node = Object.assign({}, x);

      var xKeys = Object.keys(x);
      var yKeys = Object.keys(y);

      var sameKeys = (0, _intersection2.default)(xKeys, yKeys);
      (0, _forEach2.default)(sameKeys, function (key) {
        var childKeyStack = [].concat(_toConsumableArray(keyStack), [key]);

        if (typeof x[key] === 'function' || typeof y[key] === 'function') {
          throw new Error('Conflict when mounting difference reducers on the ' + ('same node ' + childKeyStack.join('.') + '.'));
        }

        node[key] = mergeTree(x[key], y[key], childKeyStack);
      });

      var diffKeys = (0, _difference2.default)(yKeys, xKeys);
      (0, _forEach2.default)(diffKeys, function (key) {
        node[key] = y[key];
      });

      return node;
    }(currentReducerTree, reducer);

    currentReducer = (0, _combineReducers2.default)(currentReducerTree);

    var unmounted = false;
    return function unmountReducer() {
      if (unmounted) {
        return;
      }

      currentReducerTree = function separateTree(x, y) {
        var node = {};

        (0, _forEach2.default)(x, function (value, key) {
          if (value === y[key]) {
            return;
          }

          if (y[key]) {
            value = separateTree(value, y[key]);

            if ((0, _isEmpty2.default)(value)) {
              return;
            }
          }

          node[key] = value;
        });

        return node;
      }(currentReducerTree, reducer);

      if ((0, _isEmpty2.default)(currentReducerTree)) {
        currentReducer = initReducer;
      } else {
        currentReducer = (0, _combineReducers2.default)(currentReducerTree);
      }

      unmounted = true;
    };
  }

  function subscribe() {
    var resultSubscriber = null;

    for (var _len = arguments.length, listener = Array(_len), _key = 0; _key < _len; _key++) {
      listener[_key] = arguments[_key];
    }

    if (listener.length === 1) {
      // combineSubscribers
      var subscriber = listener[0];


      subscriber = hack(subscriber);
      resultSubscriber = (0, _combineSubscribers2.default)(subscriber);
    } else if (listener.length === 2) {
      // multiplexSubscriber
      var target = listener[0];
      var _subscriber = listener[1];


      target = hack(target);
      resultSubscriber = (0, _multiplexSubscriber2.default)(target, _subscriber);
    } else {
      throw new Error('Unexpected arguments.');
    }

    currentSubscribers.push(resultSubscriber);

    var unsubscribed = false;
    return function unsubscribe() {
      if (unsubscribed) {
        return;
      }

      var index = currentSubscribers.indexOf(resultSubscriber);
      currentSubscribers.splice(index, 1);

      unsubscribed = true;
    };
  }

  function dispatch(action) {
    if (!(0, _isPlainObject2.default)(action)) {
      throw new Error('Actions must be plain objects.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property.');
    }

    // to make sure all dispatching run in the sequence
    // they emitted
    previousDispatch = previousDispatch.then(function () {
      return Promise.resolve().then(function () {
        return Promise.all([currentReducer(currentState, action)]).then(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 1);

          var state = _ref2[0];

          currentState = state;

          // copy a listeners list to avoid the effect of
          // unsubscribing in listeners
          var listeners = currentSubscribers.slice();
          var promises = [];

          (0, _forEach2.default)(listeners, function (listener) {
            promises.push(listener(currentState));
          });

          return Promise.all(promises);
        }).then(function () {
          return action;
        });
      });
    });

    return previousDispatch;
  }

  // support middlewares
  var pipeline = dispatch;
  if ((0, _isArray2.default)(middlewares) && !(0, _isEmpty2.default)(middlewares)) {
    pipeline = (0, _reduceRight2.default)(middlewares, function wrapMiddlewares(next, middleware) {
      return function (action) {
        return Promise.resolve().then(function () {
          return Promise.all([middleware(action, next)]).then(function (_ref3) {
            var _ref4 = _slicedToArray(_ref3, 1);

            var returnAction = _ref4[0];
            return returnAction;
          });
        });
      };
    }, function (action) {
      return dispatch(action);
    });
  }

  function initState() {
    return pipeline({ type: '@@coeus/INIT' });
  }

  return {
    getState: getState,
    mountReducer: mountReducer,
    subscribe: subscribe,
    dispatch: pipeline,
    initState: initState
  };
}